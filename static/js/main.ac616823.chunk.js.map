{"version":3,"sources":["DrumPad.js","Drum.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","bind","assertThisInitialized","playSound","e","power","keyCode","pad","document","getElementById","keyTrigger","display","volume","currentTime","innerHTML","id","play","addEventListener","removeEventListener","react_default","a","createElement","className","onClick","style","boxShadow","src","url","React","Component","bankOne","bankTwo","Drum","state","currentBank","bankRef","currentClip","handleAudioToggle","setState","_this2","beats","map","x","src_DrumPad","slice","type","min","max","onChange","target","value","App","src_Drum","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac616823.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass DrumPad extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.playSound = this.playSound.bind(this);\r\n    }\r\n\r\n    handleKeyPress(e){\r\n        if(this.props.power && e.keyCode === this.props.keyCode){\r\n            this.playSound();\r\n        }\r\n    }\r\n\r\n    playSound(){\r\n        let pad = document.getElementById(this.props.keyTrigger);\r\n        let display = document.getElementById('clip-id');\r\n        pad.volume = this.props.volume / 100;\r\n        pad.currentTime = 0;\r\n        display.innerHTML = this.props.id;\r\n        pad.play();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.handleKeyPress);\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handleKeyPress);\r\n    }\r\n\r\n\r\n    render(){\r\n        const inactiveStyle = {boxShadow: '2px 2px grey'}\r\n        return(\r\n            <div id={this.props.id} className=\"drum-pad col col-md-3 text-center btn btn-primary\" onClick={this.playSound} style={inactiveStyle}>\r\n                <audio className=\"clip\" id={this.props.keyTrigger} src={this.props.url}></audio>\r\n                {this.props.keyTrigger}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPad;","import React from 'react';\r\nimport DrumPad from './DrumPad';\r\n\r\nconst bankOne = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n  }, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n  }, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n  },\r\n];\r\n\r\nconst bankTwo = [{\r\n  keyCode: 81,\r\n  keyTrigger: 'Q',\r\n  id: 'Chord-1',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n}, {\r\n  keyCode: 87,\r\n  keyTrigger: 'W',\r\n  id: 'Chord-2',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n}, {\r\n  keyCode: 69,\r\n  keyTrigger: 'E',\r\n  id: 'Chord-3',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n}, {\r\n  keyCode: 65,\r\n  keyTrigger: 'A',\r\n  id: 'Shaker',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n}, {\r\n  keyCode: 83,\r\n  keyTrigger: 'S',\r\n  id: 'Open-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n}, {\r\n  keyCode: 68,\r\n  keyTrigger: 'D',\r\n  id: 'Closed-HH',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n  keyCode: 90,\r\n  keyTrigger: 'Z',\r\n  id: 'Punchy-Kick',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n}, {\r\n  keyCode: 88,\r\n  keyTrigger: 'X',\r\n  id: 'Side-Stick',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n}, {\r\n  keyCode: 67,\r\n  keyTrigger: 'C',\r\n  id: 'Snare',\r\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n}];\r\n\r\nclass Drum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          currentBank: bankOne,\r\n          bankRef: 1,\r\n          power: true,\r\n          volume: 50,\r\n          currentClip:'-'\r\n        };\r\n\r\n        this.handleAudioToggle = this.handleAudioToggle.bind(this);\r\n        \r\n    }\r\n\r\n    handleAudioToggle(){\r\n      this.setState({currentBank: this.state.bankRef === 1 ? bankTwo : bankOne,\r\n        bankRef: this.state.bankRef === 1 ? 2 : 1\r\n      });\r\n    }\r\n    \r\n\r\n    render(){\r\n        let beats = this.state.currentBank.map(x => \r\n            <DrumPad volume={this.state.volume} power={this.state.power} id={x.id} keyCode={x.keyCode} keyTrigger={x.keyTrigger} url={x.url}/>\r\n        );\r\n\r\n        return (\r\n            <div id=\"drum-machine\">\r\n              <div className=\"container-fluid\">\r\n                <div className=\"row drum-pads-container\">\r\n                  <div className=\"col-md-6\">\r\n                    <div className=\"drum-pad-row row justify-content-md-start\">{beats.slice(0,3)}</div>\r\n                    <div className=\"drum-pad-row row justify-content-md-start\">{beats.slice(3,6)}</div>\r\n                    <div className=\"drum-pad-row row justify-content-md-start\">{beats.slice(6,9)}</div>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <div className=\"option row justify-content-md-center\">\r\n                      <button className={this.state.power ? \"btn btn-success\" : \"btn btn-secondary\"} id=\"toggleButton\" onClick={ e => {this.setState({power: !this.state.power}); } }> Power </button>\r\n                    </div>\r\n                    <div className=\"option row justify-content-md-center\">\r\n\r\n                      <button className=\"btn btn-info\" id=\"toggleButton\" onClick={this.handleAudioToggle}>{ this.state.bankRef === 1 ? \"Summer Heat\" : \"Chord\"}</button>\r\n                    </div>\r\n                    <div className=\"option row justify-content-md-center\">\r\n\t\t                  <input type=\"range\" min={1} max={100} className=\"slider\" id=\"volume\" onChange={e => {this.setState({volume: e.target.value}); document.getElementById('clip-id').innerHTML = this.state.volume;}} value={this.state.volume}/>\r\n                    </div>\r\n                    <div id=\"display\" className=\"option row justify-content-md-center current-clip\">\r\n                      <p id=\"clip-id\" className=\"text-center\">-</p>\r\n                    </div>\r\n                  </div>\r\n                  </div>\r\n              </div>\r\n\r\n              \r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Drum;","import React from 'react';\nimport './App.css';\nimport Drum from './Drum';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Drum />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}